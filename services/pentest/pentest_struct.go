package pentest

import "encoding/xml"

// AuthenticateResponse is a structure of the response
type AuthenticateResponse struct {
	XMLName    xml.Name `xml:"authenticate_response"`
	Status     string   `xml:"status,attr"`
	StatusText string   `xml:"status_text,attr"`
	Role       string   `xml:"role"`
	Timezone   string   `xml:"timezone"`
	Severity   string   `xml:"severity"`
}

// ###################################################

// CreateTargetResponse is a structure of the response
type CreateTargetResponse struct {
	Authenticate AuthenticateResponse `xml:"authenticate_response"`
	CreateTarget struct {
		XMLName    xml.Name `xml:"create_target_response"`
		Status     string   `xml:"status,attr"`
		StatusText string   `xml:"status_text,attr"`
		ID         string   `xml:"id,attr"`
	}
}

// ###################################################

// GetConfigsResponse is a structure of the response
type GetConfigsResponse struct {
	Authenticate       AuthenticateResponse `xml:"authenticate_response"`
	GetConfigsResponse struct {
		XMLName    xml.Name `xml:"get_configs_response"`
		Status     string   `xml:"status,attr"`
		StatusText string   `xml:"status_text,attr"`
		Config     []Config `xml:"config"`
		Filters    Filters  `xml:"filters"`
		Configs    Configs  `xml:"configs"`
		Field      string   `xml:"sort>field"`
	}
}

// Filters is a structure
type Filters struct {
	XMLName  xml.Name `xml:"filters"`
	ID       string   `xml:"id,attr"`
	Term     string   `xml:"term"`
	Value    []string `xml:"keywords>keyword>value"`
	Column   []string `xml:"keywords>keyword>column"`
	Relation []string `xml:"keywords>keyword>relation"`
}

// Configs is a structure
type Configs struct {
	Max   string `xml:"max,attr"`
	Start string `xml:"start,attr"`
}

// Config is a structure
type Config struct {
	XMLName                      xml.Name `xml:"config"`
	ID                           string   `xml:"id,attr"`
	ConfigCount                  string   `xml:"config_count"`
	FamilyCount                  []string `xml:"family_count"`
	Type                         []string `xml:"type"`
	NvtCount                     []string `xml:"nvt_count"`
	Count                        []string `xml:"user_tags>count"`
	Permissions                  []string `xml:"permissions"`
	Comment                      []string `xml:"comment"`
	Writable                     []string `xml:"writable"`
	InUse                        []string `xml:"in_use"`
	CreationTime                 []string `xml:"creation_time"`
	ModificationTime             []string `xml:"modification_time"`
	Name                         []string `xml:"owner>name"`
	NameConfigGetConfigsResponse []string `xml:"name"`
}

// ###################################################

// CreateTaskResponse is a structure of the response
type CreateTaskResponse struct {
	Authenticate AuthenticateResponse `xml:"authenticate_response"`
	CreateTask   struct {
		XMLName    xml.Name `xml:"create_task_response"`
		Status     string   `xml:"status,attr"`
		StatusText string   `xml:"status_text,attr"`
		ID         string   `xml:"id,attr"`
	}
}

// ###################################################

// StartTaskResponse is a structure of the response
type StartTaskResponse struct {
	Authenticate AuthenticateResponse `xml:"authenticate_response"`
	StartTask    struct {
		XMLName    xml.Name `xml:"start_task_response"`
		Status     string   `xml:"status,attr"`
		StatusText string   `xml:"status_text,attr"`
		ReportID   string   `xml:"report_id"`
	}
}

// ###################################################

// GetReportsResponse is a structure of the response
type GetReportsResponse struct {
	Authenticate       AuthenticateResponse `xml:"authenticate_response"`
	GetReportsResponse struct {
		XMLName     xml.Name `xml:"get_reports_response"`
		Status      string   `xml:"status,attr"`
		StatusText  string   `xml:"status_text,attr"`
		ReportCount string   `xml:"report_count"`
		Filters     Filters  `xml:"filters"`
		Reports     Reports  `xml:"reports"`
		Report      Report   `xml:"report"`
	}
	FieldSort string `xml:"sort>field"`
}

// Report is a structure
type Report struct {
	XMLName          xml.Name     `xml:"report"`
	FormatID         string       `xml:"format_id,attr"`
	ContentType      string       `xml:"content_type,attr"`
	Type             string       `xml:"type,attr"`
	Extension        string       `xml:"extension,attr"`
	ID               string       `xml:"id,attr"`
	InUse            string       `xml:"in_use"`
	Writable         string       `xml:"writable"`
	Comment          string       `xml:"comment"`
	Name             string       `xml:"name"`
	NameOwnerReport  string       `xml:"owner>name"`
	CreationTime     string       `xml:"creation_time"`
	ModificationTime string       `xml:"modification_time"`
	Report           ReportReport `xml:"report"`
	Task             struct {
		XMLName xml.Name `xml:"task"`
		ID      string   `xml:"id,attr"`
		Name    string   `xml:"name"`
	}
}

// ReportReport is a structure
type ReportReport struct {
	XMLName                                      xml.Name `xml:"report"`
	ID                                           string   `xml:"id,attr"`
	PageInfoResultCountHostReportReport          string   `xml:"host>result_count>info>page"`
	ScanStart                                    string   `xml:"scan_start"`
	Filtered                                     string   `xml:"severity>filtered"`
	PageHoleResultCountHostReportReport          string   `xml:"host>result_count>hole>page"`
	NameDetailHostReportReport                   []string `xml:"host>detail>name"`
	CountVulnsReportReport                       string   `xml:"vulns>count"`
	HostHostEndReportReport                      string   `xml:"host_end>host"`
	Field                                        string   `xml:"sort>field"`
	Timezone                                     string   `xml:"timezone"`
	PageFalsePositiveResultCountHostReportReport string   `xml:"host>result_count>false_positive>page"`
	TimezoneAbbrev                               string   `xml:"timezone_abbrev"`
	Value                                        []string `xml:"host>detail>value"`
	End                                          string   `xml:"host>end"`
	CountSslCertsReportReport                    string   `xml:"ssl_certs>count"`
	Full                                         string   `xml:"severity>full"`
	CountErrorsReportReport                      string   `xml:"errors>count"`
	PageWarningResultCountHostReportReport       string   `xml:"host>result_count>warning>page"`
	Type                                         []string `xml:"host>detail>source>type"`
	IP                                           string   `xml:"host>ip"`
	ScanRunStatus                                string   `xml:"scan_run_status"`
	ResultCount                                  string   `xml:"result_count"`
	NameSourceDetailHostReportReport             []string `xml:"host>detail>source>name"`
	CountAppsReportReport                        string   `xml:"apps>count"`
	ReportFormat                                 string   `xml:"report_format"`
	Version                                      string   `xml:"omp>version"`
	CountClosedCvesReportReport                  string   `xml:"closed_cves>count"`
	Extra                                        []string `xml:"host>detail>extra"`
	ScanEnd                                      string   `xml:"scan_end"`
	CountHostsReportReport                       string   `xml:"hosts>count"`
	Start                                        string   `xml:"host>start"`
	PageLogResultCountHostReportReport           string   `xml:"host>result_count>log>page"`
	Timestamp                                    string   `xml:"timestamp"`
	Page                                         string   `xml:"host>port_count>page"`
	Description                                  []string `xml:"host>detail>source>description"`
	Asset                                        Asset    `xml:"host>asset"`
	Count                                        string   `xml:"user_tags>count"`
	PageResultCountHostReportReport              string   `xml:"host>result_count>page"`
	CountOsReportReport                          string   `xml:"os>count"`
	Results                                      Results  `xml:"results"`
	SeverityClass                                struct {
		XMLName  xml.Name `xml:"severity_class"`
		ID       string   `xml:"id,attr"`
		FullName string   `xml:"full_name"`
		Name     string   `xml:"name"`
		Range    []struct {
			XMLName xml.Name `xml:"severity_range"`
			Name    string   `xml:"name"`
			Max     string   `xml:"max"`
			Min     string   `xml:"min"`
		}
	}
	HostStart struct {
		XMLName xml.Name `xml:"host_start"`
		Text    string   `xml:",chardata"`
		Host    string   `xml:"host"`
	}
	Ports struct {
		XMLName                xml.Name `xml:"ports"`
		Start                  string   `xml:"start,attr"`
		Max                    string   `xml:"max,attr"`
		CountPortsReportReport string   `xml:"count"`
		Port                   struct {
			XMLName  xml.Name `xml:"port"`
			Text     string   `xml:",chardata"`
			Threat   string   `xml:"threat"`
			Severity string   `xml:"severity"`
			Host     string   `xml:"host"`
		}
	}
	Format struct {
		XMLName xml.Name `xml:"format"`
		Name    string   `xml:"name"`
	}
	ScanTasks struct {
		XMLName xml.Name `xml:"scan"`
		Tasks   []struct {
			XMLName     xml.Name `xml:"task"`
			Preferences struct {
				XMLName    xml.Name `xml:"preference"`
				Preference []struct {
					XMLName xml.Name `xml:"preferences"`
					Name    string   `xml:"name"`
					Value   string   `xml:"value"`
					Scanner string   `xml:"scanner_name"`
				}
			}
			Slave struct {
				XMLName xml.Name `xml:"slave"`
				ID      string   `xml:"id,attr"`
				Name    string   `xml:"name"`
				Port    string   `xml:"port"`
				Host    string   `xml:"host"`
			}
		}
	}
}

// Results is a structure
type Results struct {
	XMLName xml.Name `xml:"results"`
	Start   string   `xml:"start,attr"`
	Max     string   `xml:"max,attr"`
	Result  struct {
		XMLName                                xml.Name `xml:"result"`
		Comment                                string   `xml:"comment"`
		CreationTime                           string   `xml:"creation_time"`
		Name                                   string   `xml:"name"`
		Port                                   string   `xml:"port"`
		Description                            string   `xml:"description"`
		ModificationTime                       string   `xml:"modification_time"`
		Secerity                               string   `xml:"severity"`
		CountUserTagsResultResultsReportReport string   `xml:"user_tags>count"`
		NameOwnerResultResultsReportReport     string   `xml:"owner>name"`
		ScanNvtVersion                         string   `xml:"scan_nvt_version"`
		ThreatResultResultsReportReport        string   `xml:"threat"`
		HostResultResultsReportReport          string   `xml:"host"`
		Qod                                    []struct {
			XMLName xml.Name `xml:"qod"`
			Value   string   `xml:"value"`
			Type    string   `xml:"type"`
		}
		Nvt []struct {
			XMLName  xml.Name `xml:"nvt"`
			Oid      string   `xml:"oid,attr"`
			Cve      string   `xml:"cve"`
			Tags     string   `xml:"tags"`
			Name     string   `xml:"name"`
			CvssBase string   `xml:"cvss_base"`
			Family   string   `xml:"family"`
			Bid      string   `xml:"bid"`
			Type     string   `xml:"type"`
			Cert     string   `xml:"cert"`
			Xref     string   `xml:"xref"`
		}
	}
	Task struct {
		XMLName      xml.Name `xml:"task"`
		Progress     string   `xml:"progress"`
		Comment      string   `xml:"comment"`
		Name         string   `xml:"name"`
		TagUserCount string   `xml:"user_tags>count"`
		Target       struct {
			XMLName xml.Name `xml:"target"`
			Trash   string   `xml:"trash"`
		}
	}
}

// Result is a structure
type Result struct {
	ID string `xml:"id,attr"`
}

// ReportFormatReport is a structure
type ReportFormatReport struct {
	ID string `xml:"id,attr"`
}

// Reports is a structure
type Reports struct {
	Start string `xml:"start,attr"`
	Max   string `xml:"max,attr"`
}

// Asset is a structure
type Asset struct {
	AssetID string `xml:"asset_id,attr"`
}

// TaskReport is a structure
type TaskReport struct {
	ID string `xml:"id,attr"`
}

// Target is a structure
type Target struct {
	ID string `xml:"id,attr"`
}

// ######################################

// GetReportsResponseInFormat is a structure
type GetReportsResponseInFormat struct {
	Authenticate       AuthenticateResponse `xml:"authenticate_response"`
	GetReportsResponse struct {
		XMLName    xml.Name `xml:"get_reports_response"`
		Status     string   `xml:"status,attr"`
		StatusText string   `xml:"status_text,attr"`
		Report     struct {
			XMLName     xml.Name `xml:"report"`
			ID          string   `xml:"id,attr"`
			FormatID    string   `xml:"format_id,attr"`
			ContentType string   `xml:"content_type,attr"`
			Extension   string   `xml:"extension,attr"`
			Data        string   `xml:",chardata"`
		}
	}
}

// ######################################

// GetReportFormatsResponse is a structure
type GetReportFormatsResponse struct {
	Authenticate             AuthenticateResponse `xml:"authenticate_response"`
	GetReportFormatsResponse struct {
		XMLName       xml.Name `xml:"get_report_formats_response"`
		Status        string   `xml:"status,attr"`
		StatusText    string   `xml:"status_text,attr"`
		SortField     string   `xml:"sort>field"`
		SortOrder     string   `xml:"sort>order"`
		ReportFormats struct {
			XMLName xml.Name `xml:"report_formats"`
			Start   string   `xml:"start,attr"`
			Max     string   `xml:"max,attr"`
		}
		ReportFormat      []ReportFormat `xml:"report_format"`
		ReportFormatCount struct {
			XMLName  xml.Name `xml:"report_format_count"`
			Count    string   `xml:",chardata"`
			Filtered string   `xml:"filtered"`
			Page     string   `xml:"page"`
		}
		Filter Filters `xml:"filters"`
	}
}

// ReportFormat is a structure
type ReportFormat struct {
	XMLName          xml.Name `xml:"report_format"`
	ID               string   `xml:"id,attr"`
	OnwerName        string   `xml:"owner>name"`
	Name             string   `xml:"name"`
	Comment          string   `xml:"comment"`
	CreationTime     string   `xml:"creation_time"`
	ModificationTime string   `xml:"modification_time"`
	Writable         string   `xml:"writable"`
	InUse            string   `xml:"in_use"`
	NamePermission   string   `xml:"permissions>permission>name"`
	UserTagsCount    string   `xml:"user_tags>count"`
	Extension        string   `xml:"extension"`
	ContentType      string   `xml:"content_type"`
	Summary          string   `xml:"summary"`
	Description      string   `xml:"description"`
	Predefined       string   `xml:"predefined"`
	Trust            struct {
		XMLName xml.Name `xml:"trust"`
		Text    string   `xml:",chardata"`
		Time    string   `xml:"time"`
	}
	Active string `xml:"active"`
}
